#!/usr/bin/env perl
# pwent-ext - Run "getent passwd" and parse the results with regexps.

# Copyright (c) 2020 Eliah Kagan
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use Data::Dumper qw(Dumper);
use English qw(LAST_PAREN_MATCH PROGRAM_NAME);

for my $username_or_uid (@ARGV ? @ARGV : `getent passwd` =~ /^[^:]+/msxg) {
    # Make sure the argument won't inadverently cause a shell to run commands.
    unless ($username_or_uid =~ /\A\w[\w-]*\z/msx) {
        warn qq{$PROGRAM_NAME: bad username or uid "$username_or_uid"\n};
        next;
    }

    if (`getent passwd $username_or_uid` =~ m{^(?<user>[^:\n]+)
                                              :(?<pass>[^:\n]*)
                                              :(?<uid>\d+)
                                              :(?<gid>\d+)
                                              :(?<gecos>[^:\n]*)
                                              :(?<home>[^:\n]+)
                                              :(?<shell>[^:\n]+)$}msx) {
        print Dumper(\%LAST_PAREN_MATCH);
    } else {
        warn qq{$PROGRAM_NAME: username or uid "$username_or_uid" not found\n};
    }
}
