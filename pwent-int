#!/usr/bin/env perl
# pwent-int - Use getpwent, getpwuid and getpwnam, to read /etc/passwd info.

# Copyright (c) 2020 Eliah Kagan
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use Data::Dumper qw(Dumper);
use English qw(PROGRAM_NAME);

sub display_passwd_record {
    my ($name,
        $passwd,
        $uid,
        $gid,
        $quota,
        $comment,
        $gcos,
        $dir,
        $shell,
        $expire) = @_;

    print Dumper({
        user => $name,
        passwd => $passwd,
        uid => $uid,
        gid => $gid,
        gecos => $gcos,
        home => $dir,
        shell => $shell,
    });

    return;
}

sub query_one {
    my $username_or_uid = shift;

    my @pw = ($username_or_uid =~ /\A\d+\z/msx ? getpwuid $username_or_uid
                                               : getpwnam $username_or_uid);

    if (@pw) {
        display_passwd_record(@pw);
    } else {
        warn qq{$PROGRAM_NAME: username or uid "$username_or_uid" not found\n};
    }

    return;
}

if (@ARGV) {
    for my $username_or_uid (@ARGV) {
        query_one($username_or_uid);
    }
} else {
    while (my @pw = getpwent) {
        display_passwd_record(@pw);
    }
}
